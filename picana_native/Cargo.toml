[package]
name = "picana_native"
version = "0.1.0"
authors = ["Harry K <kituyiharry@gmail.com>"]
edition = "2018"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[lib]
name = "picana"
#So that brings us to today. Cargo supports (1) with dylib and cdylib. Cargo also supports compiler plugins where -C prefer-dynamic is required. Cargo also has what I believe buggy support around passing -C prefer-dynamic related to workspaces. This was likely introduced in one of the many refactorings to enable Cargo to work with workspaces (where originally it never did).
crate-type = ["cdylib"]

[dependencies]
memmap = "0.7.0"
lazy_static = "1.4.0"
libc = { version = "0.2", default-features = false }
hex = "0.2.0"
log = "0.4"
canparse =  "0.1.4"
hashbrown = "0.6"
parking_lot = "0.10"
#dart-sys = "^0.1.2" -- soon!
memchr = { version = "2", default-features = false }
mio = { version = "0.7.0-alpha.1", features = ["os-util", "os-poll"] }
socketcan = { path = '../socketcan-rs' }
dart-sys = { path = '../dart-sys' }

#tokio = { version = "0.2.0", features = ["full"] }
#tokio-socketcan = { git = "https://github.com/marcelbuesing/tokio-socketcan.git", branch = "futures-03" }
#futures = "0.3.1"
#futures-util = "0.3.1"


# Replace current nix version!(socketcan use 0.5.1 which isn't android compatible)
[replace]
"nix:0.5.1" = { path = '../nix' }

#link-time optimization (LTO). 
#In this scheme the compiler produces optimized binaries from each file without looking at others, 
#and then the linker actively looks at them all and tries to optimize the binary. 
#It is much harder than working with (internally simplified) sources, 
#and it hugely increases the compilation time, but it is worth trying if a smaller and/or faster executable is needed.
[profile.release]
lto = true #Link time optimizations
#panic = 'abort' #Research this more
#opt-level = "z" or s for speed

#Compile with --release.
#Before distribution, enable LTO and strip the binary.
#If your program is not memory-intensive, use the system allocator (assuming nightly).
#You may be able to use the optimization level s/z in the future as well.
#I didn’t mention this because it doesn’t improve such a small program, but you can also try UPX and other executable compressors if you are working with a much larger application.
