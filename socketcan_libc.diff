diff --git a/src/lib.rs b/src/lib.rs
index 30fb2d4..a2be0af 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -54,14 +54,16 @@ pub mod dump;
 #[cfg(test)]
 mod tests;
 
-use libc::{c_int, c_short, c_void, c_uint, socket, SOCK_RAW, close, bind, sockaddr, read, write,
-           setsockopt, SOL_SOCKET, SO_RCVTIMEO, timeval, EINPROGRESS, SO_SNDTIMEO, time_t,
-           suseconds_t, fcntl, F_GETFL, F_SETFL, O_NONBLOCK};
 use itertools::Itertools;
-use std::{error, fmt, io, time};
+use libc::{
+    bind, c_int, c_short, c_uint, c_void, close, fcntl, read, setsockopt, sockaddr, socket,
+    suseconds_t, time_t, timeval, write, EINPROGRESS, F_GETFL, F_SETFL, O_NONBLOCK, SOCK_RAW,
+    SOL_SOCKET, SO_RCVTIMEO, SO_SNDTIMEO,
+};
+use nix::net::if_::if_nametoindex;
 use std::mem::size_of;
 use std::os::unix::io::{AsRawFd, FromRawFd, IntoRawFd, RawFd};
-use nix::net::if_::if_nametoindex;
+use std::{error, fmt, io, time};
 
 /// Check an error return value for timeouts.
 ///
@@ -133,7 +135,6 @@ pub const EFF_MASK: u32 = 0x1fffffff;
 /// valid bits in error frame
 pub const ERR_MASK: u32 = 0x1fffffff;
 
-
 fn c_timeval_new(t: time::Duration) -> timeval {
     timeval {
         tv_sec: t.as_secs() as time_t,
@@ -185,7 +186,6 @@ impl error::Error for CANSocketOpenError {
     }
 }
 
-
 #[derive(Debug, Copy, Clone)]
 /// Error that occurs when creating CAN packets
 pub enum ConstructionError {
@@ -271,9 +271,11 @@ impl CANSocket {
         let bind_rv;
         unsafe {
             let sockaddr_ptr = &addr as *const CANAddr;
-            bind_rv = bind(sock_fd,
-                           sockaddr_ptr as *const sockaddr,
-                           size_of::<CANAddr>() as u32);
+            bind_rv = bind(
+                sock_fd,
+                sockaddr_ptr as *const sockaddr,
+                size_of::<CANAddr>() as libc::socklen_t,
+            );
         }
 
         if bind_rv == -1 {
@@ -328,11 +330,13 @@ impl CANSocket {
         let rv = unsafe {
             let tv = c_timeval_new(duration);
             let tv_ptr: *const timeval = &tv as *const timeval;
-            setsockopt(self.fd,
-                       SOL_SOCKET,
-                       SO_RCVTIMEO,
-                       tv_ptr as *const c_void,
-                       size_of::<timeval>() as u32)
+            setsockopt(
+                self.fd,
+                SOL_SOCKET,
+                SO_RCVTIMEO,
+                tv_ptr as *const c_void,
+                size_of::<timeval>() as libc::socklen_t,
+            )
         };
 
         if rv != 0 {
@@ -347,11 +351,13 @@ impl CANSocket {
         let rv = unsafe {
             let tv = c_timeval_new(duration);
             let tv_ptr: *const timeval = &tv as *const timeval;
-            setsockopt(self.fd,
-                       SOL_SOCKET,
-                       SO_SNDTIMEO,
-                       tv_ptr as *const c_void,
-                       size_of::<timeval>() as u32)
+            setsockopt(
+                self.fd,
+                SOL_SOCKET,
+                SO_SNDTIMEO,
+                tv_ptr as *const c_void,
+                size_of::<timeval>() as libc::socklen_t,
+            )
         };
 
         if rv != 0 {
@@ -423,7 +429,6 @@ impl CANSocket {
 
     /// Sets the filter mask on the socket.
     pub fn set_filter(&self, filters: &[CANFilter]) -> io::Result<()> {
-
         // TODO: Handle different *_FILTER sockopts.
 
         let rv = if filters.len() < 1 {
@@ -432,11 +437,13 @@ impl CANSocket {
         } else {
             unsafe {
                 let filters_ptr = &filters[0] as *const CANFilter;
-                setsockopt(self.fd,
-                           SOL_CAN_RAW,
-                           CAN_RAW_FILTER,
-                           filters_ptr as *const c_void,
-                           (size_of::<CANFilter>() * filters.len()) as u32)
+                setsockopt(
+                    self.fd,
+                    SOL_CAN_RAW,
+                    CAN_RAW_FILTER,
+                    filters_ptr as *const c_void,
+                    (size_of::<CANFilter>() * filters.len()) as libc::socklen_t,
+                )
             }
         };
 
@@ -467,11 +474,13 @@ impl CANSocket {
     #[inline(always)]
     pub fn set_error_filter(&self, mask: u32) -> io::Result<()> {
         let rv = unsafe {
-            setsockopt(self.fd,
-                       SOL_CAN_RAW,
-                       CAN_RAW_ERR_FILTER,
-                       (&mask as *const u32) as *const c_void,
-                       size_of::<u32>() as u32)
+            setsockopt(
+                self.fd,
+                SOL_CAN_RAW,
+                CAN_RAW_ERR_FILTER,
+                (&mask as *const u32) as *const c_void,
+                size_of::<u32>() as libc::socklen_t,
+            )
         };
 
         if rv != 0 {
@@ -479,7 +488,6 @@ impl CANSocket {
         }
 
         Ok(())
-
     }
 
     #[inline(always)]
@@ -560,7 +568,6 @@ impl CANFrame {
             _id |= EFF_FLAG;
         }
 
-
         if rtr {
             _id |= RTR_FLAG;
         }
@@ -577,13 +584,13 @@ impl CANFrame {
         }
 
         Ok(CANFrame {
-               _id: _id,
-               _data_len: data.len() as u8,
-               _pad: 0,
-               _res0: 0,
-               _res1: 0,
-               _data: full_data,
-           })
+            _id: _id,
+            _data_len: data.len() as u8,
+            _pad: 0,
+            _res0: 0,
+            _res1: 0,
+            _data: full_data,
+        })
     }
 
     /// Return the actual CAN ID (without EFF/RTR/ERR flags)
@@ -657,8 +664,8 @@ pub struct CANFilter {
 impl CANFilter {
     pub fn new(id: u32, mask: u32) -> Result<CANFilter, ConstructionError> {
         Ok(CANFilter {
-               _id: id,
-               _mask: mask,
-           })
+            _id: id,
+            _mask: mask,
+        })
     }
 }
